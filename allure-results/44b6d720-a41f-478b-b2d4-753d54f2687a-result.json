{"name": "test_login_with_valid_credentials[amotooriapril2023@gmail.com-12345]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[text()='Edit your account information']\"}\n  (Session info: MicrosoftEdge=134.0.3124.93); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF6E18BA545+20677]\n\tsimdutf::get_active_implementation [0x00007FF6E1816CF0+491296]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6E1B0D75A+1807418]\n\t(No symbol) [0x00007FF6E16572AC]\n\t(No symbol) [0x00007FF6E165758B]\n\t(No symbol) [0x00007FF6E16985A7]\n\t(No symbol) [0x00007FF6E167849F]\n\t(No symbol) [0x00007FF6E164D6ED]\n\t(No symbol) [0x00007FF6E1695D61]\n\t(No symbol) [0x00007FF6E16781C3]\n\t(No symbol) [0x00007FF6E164CC36]\n\t(No symbol) [0x00007FF6E164C0C4]\n\t(No symbol) [0x00007FF6E164CA63]\n\t(No symbol) [0x00007FF6E1735BDD]\n\t(No symbol) [0x00007FF6E1742042]\n\t(No symbol) [0x00007FF6E173AA03]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6E19942AA+262026]\n\tsimdutf::get_active_implementation [0x00007FF6E1824421+546385]\n\tsimdutf::get_active_implementation [0x00007FF6E181D6D4+518404]\n\tsimdutf::get_active_implementation [0x00007FF6E181D819+518729]\n\tsimdutf::get_active_implementation [0x00007FF6E180F3C6+460278]\n\tBaseThreadInitThunk [0x00007FF83F4B259D+29]\n\tRtlUserThreadStart [0x00007FF840E4AF38+40]", "trace": "self = <tests.test_Login.TestLogin object at 0x0000024934C1E210>\nemail_address = 'amotooriapril2023@gmail.com', password = 12345\n\n    @pytest.mark.parametrize(\"email_address,password\",ExcelUtils.get_data_from_excel(\".//ExcelFiles//Tutorialsninja.xlsx\",\"LoginTest\"))\n    def test_login_with_valid_credentials(self,email_address,password):\n      homePage=HomePage(self.driver)\n      login_page=homePage.navigate_to_login_page()\n      account_Page=login_page.login_to_application(email_address,password)\n>     assert account_Page.display_status_of_edit_your_account_information_option()\n\ntests\\test_Login.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\AccountPage.py:17: in display_status_of_edit_your_account_information_option\n    return self.check_display_status_of_element(\"edit_your_account_information_option_link_text_xpath\",self.edit_your_account_information_option_link_text_xpath)\npages\\BasePage.py:20: in check_display_status_of_element\n    element=self.get_element(locator_name,locator_value)\npages\\BasePage.py:30: in get_element\n    element = self.driver.find_element(By.XPATH, locator_value)\nC:\\Users\\sibam\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\sibam\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024934C24EC0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...80F3C6+460278]\\\\n\\\\tBaseThreadInitThunk [0x00007FF83F4B259D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF840E4AF38+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[text()='Edit your account information']\"}\nE         (Session info: MicrosoftEdge=134.0.3124.93); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6E18BA545+20677]\nE       \tsimdutf::get_active_implementation [0x00007FF6E1816CF0+491296]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6E1B0D75A+1807418]\nE       \t(No symbol) [0x00007FF6E16572AC]\nE       \t(No symbol) [0x00007FF6E165758B]\nE       \t(No symbol) [0x00007FF6E16985A7]\nE       \t(No symbol) [0x00007FF6E167849F]\nE       \t(No symbol) [0x00007FF6E164D6ED]\nE       \t(No symbol) [0x00007FF6E1695D61]\nE       \t(No symbol) [0x00007FF6E16781C3]\nE       \t(No symbol) [0x00007FF6E164CC36]\nE       \t(No symbol) [0x00007FF6E164C0C4]\nE       \t(No symbol) [0x00007FF6E164CA63]\nE       \t(No symbol) [0x00007FF6E1735BDD]\nE       \t(No symbol) [0x00007FF6E1742042]\nE       \t(No symbol) [0x00007FF6E173AA03]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6E19942AA+262026]\nE       \tsimdutf::get_active_implementation [0x00007FF6E1824421+546385]\nE       \tsimdutf::get_active_implementation [0x00007FF6E181D6D4+518404]\nE       \tsimdutf::get_active_implementation [0x00007FF6E181D819+518729]\nE       \tsimdutf::get_active_implementation [0x00007FF6E180F3C6+460278]\nE       \tBaseThreadInitThunk [0x00007FF83F4B259D+29]\nE       \tRtlUserThreadStart [0x00007FF840E4AF38+40]\n\nC:\\Users\\sibam\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException"}, "parameters": [{"name": "email_address", "value": "'amotooriapril2023@gmail.com'"}, {"name": "password", "value": "12345"}], "start": 1743574723928, "stop": 1743574725532, "uuid": "b87e6046-2a98-4381-ae7a-360d85b3a334", "historyId": "98ff5d5be74495b571dca1c99facf15c", "testCaseId": "4bc229b8c9bfad4701f861e666d3befe", "fullName": "tests.test_Login.TestLogin#test_login_with_valid_credentials", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup_and_teardown', 'log_on_failure')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_Login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-ERG7K6I"}, {"name": "thread", "value": "19664-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_Login"}]}